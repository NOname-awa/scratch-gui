import Null from './null/null.svg';

import React from 'react';
import { FormattedMessage } from 'react-intl';

import musicIconURL from './music/music.png';
import musicInsetIconURL from './music/music-small.svg';

import penIconURL from './pen/pen.png';
import penInsetIconURL from './pen/pen-small.svg';

import textURL from './text/text.png';
import textIconURL from './text/icon.svg';

import videoSensingIconURL from './videoSensing/video-sensing.png';
import videoSensingInsetIconURL from './videoSensing/video-sensing-small.svg';

import text2speechIconURL from './text2speech/text2speech.png';
import text2speechInsetIconURL from './text2speech/text2speech-small.svg';

import translateIconURL from './translate/translate.png';
import translateInsetIconURL from './translate/translate-small.png';

import makeymakeyIconURL from './makeymakey/makeymakey.png';
import makeymakeyInsetIconURL from './makeymakey/makeymakey-small.svg';

import microbitIconURL from './microbit/microbit.png';
import microbitInsetIconURL from './microbit/microbit-small.svg';
import microbitConnectionIconURL from './microbit/microbit-illustration.svg';
import microbitConnectionSmallIconURL from './microbit/microbit-small.svg';

import ev3IconURL from './ev3/ev3.png';
import ev3InsetIconURL from './ev3/ev3-small.svg';
import ev3ConnectionIconURL from './ev3/ev3-hub-illustration.svg';
import ev3ConnectionSmallIconURL from './ev3/ev3-small.svg';

import wedo2IconURL from './wedo2/wedo.png'; // TODO: Rename file names to match variable/prop names?
import wedo2InsetIconURL from './wedo2/wedo-small.svg';
import wedo2ConnectionIconURL from './wedo2/wedo-illustration.svg';
import wedo2ConnectionSmallIconURL from './wedo2/wedo-small.svg';
import wedo2ConnectionTipIconURL from './wedo2/wedo-button-illustration.svg';

import boostIconURL from './boost/boost.png';
import boostInsetIconURL from './boost/boost-small.svg';
import boostConnectionIconURL from './boost/boost-illustration.svg';
import boostConnectionSmallIconURL from './boost/boost-small.svg';
import boostConnectionTipIconURL from './boost/boost-button-illustration.svg';

import gdxforIconURL from './gdxfor/gdxfor.png';
import gdxforInsetIconURL from './gdxfor/gdxfor-small.svg';
import gdxforConnectionIconURL from './gdxfor/gdxfor-illustration.svg';
import gdxforConnectionSmallIconURL from './gdxfor/gdxfor-small.svg';

import twIcon from './tw/tw.svg';

import gcbg from './gc/gc.svg';
import gci from './gc/gci.svg';

import databg from './data/data.svg';
import dataI from './data/dataI.png';

import operationIcon from './operation/operation.svg';

import regular_expressionIcon from './regular_expression/regular_expression.svg';

import jsIcon from './js/js.svg';

import setIcon from './set/set.svg';

import toolIcon from './tool/tool.svg';

import customExtensionIcon from './custom/custom.svg';

import galleryIcon from './gallery/gallery.svg';
import stretchIcon from './gallery/stretch.svg';
import gamepadIcon from './gallery/gamepad.svg';
import cursorIcon from './gallery/cursor.svg';
import fileIcon from './gallery/file.svg';
import pointerlockIcon from './gallery/pointerlock.svg';
import runtimeOptionsIcon from './gallery/runtime-options.svg';
import utilitiesIcon from './gallery/utilities.svg';
import box2dIcon from './gallery/box2d.svg';
import box2dI from './gallery/box2d_Icon.svg';
import stringsIcon from './gallery/text.svg';
import fetchIcon from './gallery/fetch.svg';
import CommentBlocksIcon from './gallery/CommentBlocks.svg';
import comparisonsIcon from './gallery/more-comparisons.svg';
import graphics2DIcon from './gallery/graphics-2D.svg';
import rxFSIcon from './gallery/rxFS.svg';
import obviousalexsensingIcon from './gallery/SensingPlus.svg';

export default [
    {
        name: (
            <FormattedMessage
                defaultMessage="Music"
                description="Name for the 'Music' extension"
                id="gui.extension.music.name"
            />
        ),
        extensionId: 'music',
        iconURL: musicIconURL,
        insetIconURL: musicInsetIconURL,
        description: (
            <FormattedMessage
                defaultMessage="Play instruments and drums."
                description="Description for the 'Music' extension"
                id="gui.extension.music.description"
            />
        ),
        tags: ['scratch'],
        featured: true
    },
    {
        name: (
            <FormattedMessage
                defaultMessage="Pen"
                description="Name for the 'Pen' extension"
                id="gui.extension.pen.name"
            />
        ),
        extensionId: 'pen',
        iconURL: penIconURL,
        insetIconURL: penInsetIconURL,
        description: (
            <FormattedMessage
                defaultMessage="Draw with your sprites."
                description="Description for the 'Pen' extension"
                id="gui.extension.pen.description"
            />
        ),
        tags: ['scratch'],
        featured: true
    },
    /*{
        name: '动画文字',
        extensionId: 'text',
        iconURL: textURL,
        insetIconURL: textIconURL,
        description: "把角色变成动画文字。",
        collaborator: 'ScratchLab',
        tags: ['scratch'],
        featured: true
    },*/
    {
        name: (
            <FormattedMessage
                defaultMessage="Video Sensing"
                description="Name for the 'Video Sensing' extension"
                id="gui.extension.videosensing.name"
            />
        ),
        extensionId: 'videoSensing',
        iconURL: videoSensingIconURL,
        insetIconURL: videoSensingInsetIconURL,
        description: (
            <FormattedMessage
                defaultMessage="Sense motion with the camera."
                description="Description for the 'Video Sensing' extension"
                id="gui.extension.videosensing.description"
            />
        ),
        tags: ['scratch', 'tool'],
        featured: true
    },
    {
        name: (
            <FormattedMessage
                defaultMessage="Text to Speech"
                description="Name for the Text to Speech extension"
                id="gui.extension.text2speech.name"
            />
        ),
        extensionId: 'text2speech',
        collaborator: 'Amazon Web Services',
        iconURL: text2speechIconURL,
        insetIconURL: text2speechInsetIconURL,
        description: (
            <FormattedMessage
                defaultMessage="Make your projects talk."
                description="Description for the Text to speech extension"
                id="gui.extension.text2speech.description"
            />
        ),
        tags: ['scratch', 'tool'],
        featured: true,
        internetConnectionRequired: true
    },
    {
        name: (
            <FormattedMessage
                defaultMessage="Translate"
                description="Name for the Translate extension"
                id="gui.extension.translate.name"
            />
        ),
        extensionId: 'translate',
        collaborator: 'Google',
        iconURL: translateIconURL,
        insetIconURL: translateInsetIconURL,
        description: (
            <FormattedMessage
                defaultMessage="Translate text into many languages."
                description="Description for the Translate extension"
                id="gui.extension.translate.description"
            />
        ),
        tags: ['scratch', 'tool'],
        featured: true,
        internetConnectionRequired: true
    },
    {
        name: 'Makey Makey',
        extensionId: 'makeymakey',
        collaborator: 'JoyLabz',
        iconURL: makeymakeyIconURL,
        insetIconURL: makeymakeyInsetIconURL,
        description: (
            <FormattedMessage
                defaultMessage="Make anything into a key."
                description="Description for the 'Makey Makey' extension"
                id="gui.extension.makeymakey.description"
            />
        ),
        tags: ['scratch', 'tool'],
        featured: true
    },
    /*{
        name: 'micro:bit',
        extensionId: 'microbit',
        collaborator: 'micro:bit',
        iconURL: microbitIconURL,
        insetIconURL: microbitInsetIconURL,
        description: (
            <FormattedMessage
                defaultMessage="Connect your projects with the world."
                description="Description for the 'micro:bit' extension"
                id="gui.extension.microbit.description"
            />
        ),
        tags: ['scratch'],
        featured: true,
        disabled: false,
        bluetoothRequired: true,
        internetConnectionRequired: true,
        launchPeripheralConnectionFlow: true,
        useAutoScan: false,
        connectionIconURL: microbitConnectionIconURL,
        connectionSmallIconURL: microbitConnectionSmallIconURL,
        connectingMessage: (
            <FormattedMessage
                defaultMessage="Connecting"
                description="Message to help people connect to their micro:bit."
                id="gui.extension.microbit.connectingMessage"
            />
        ),
        helpLink: 'https://scratch.mit.edu/microbit'
    },
    {
        name: 'LEGO MINDSTORMS EV3',
        extensionId: 'ev3',
        collaborator: 'LEGO',
        iconURL: ev3IconURL,
        insetIconURL: ev3InsetIconURL,
        description: (
            <FormattedMessage
                defaultMessage="Build interactive robots and more."
                description="Description for the 'LEGO MINDSTORMS EV3' extension"
                id="gui.extension.ev3.description"
            />
        ),
        tags: ['scratch'],
        featured: true,
        disabled: false,
        bluetoothRequired: true,
        internetConnectionRequired: true,
        launchPeripheralConnectionFlow: true,
        useAutoScan: false,
        connectionIconURL: ev3ConnectionIconURL,
        connectionSmallIconURL: ev3ConnectionSmallIconURL,
        connectingMessage: (
            <FormattedMessage
                defaultMessage="Connecting. Make sure the pin on your EV3 is set to 1234."
                description="Message to help people connect to their EV3. Must note the PIN should be 1234."
                id="gui.extension.ev3.connectingMessage"
            />
        ),
        helpLink: 'https://scratch.mit.edu/ev3'
    },
    {
        name: 'LEGO BOOST',
        extensionId: 'boost',
        collaborator: 'LEGO',
        iconURL: boostIconURL,
        insetIconURL: boostInsetIconURL,
        description: (
            <FormattedMessage
                defaultMessage="Bring robotic creations to life."
                description="Description for the 'LEGO BOOST' extension"
                id="gui.extension.boost.description"
            />
        ),
        tags: ['scratch'],
        featured: true,
        disabled: false,
        bluetoothRequired: true,
        internetConnectionRequired: true,
        launchPeripheralConnectionFlow: true,
        useAutoScan: true,
        connectionIconURL: boostConnectionIconURL,
        connectionSmallIconURL: boostConnectionSmallIconURL,
        connectionTipIconURL: boostConnectionTipIconURL,
        connectingMessage: (
            <FormattedMessage
                defaultMessage="Connecting"
                description="Message to help people connect to their BOOST."
                id="gui.extension.boost.connectingMessage"
            />
        ),
        helpLink: 'https://scratch.mit.edu/boost'
    },
    {
        name: 'LEGO Education WeDo 2.0',
        extensionId: 'wedo2',
        collaborator: 'LEGO',
        iconURL: wedo2IconURL,
        insetIconURL: wedo2InsetIconURL,
        description: (
            <FormattedMessage
                defaultMessage="Build with motors and sensors."
                description="Description for the 'LEGO WeDo 2.0' extension"
                id="gui.extension.wedo2.description"
            />
        ),
        tags: ['scratch'],
        featured: true,
        disabled: false,
        bluetoothRequired: true,
        internetConnectionRequired: true,
        launchPeripheralConnectionFlow: true,
        useAutoScan: true,
        connectionIconURL: wedo2ConnectionIconURL,
        connectionSmallIconURL: wedo2ConnectionSmallIconURL,
        connectionTipIconURL: wedo2ConnectionTipIconURL,
        connectingMessage: (
            <FormattedMessage
                defaultMessage="Connecting"
                description="Message to help people connect to their WeDo."
                id="gui.extension.wedo2.connectingMessage"
            />
        ),
        helpLink: 'https://scratch.mit.edu/wedo'
    },
    {
        name: 'Go Direct Force & Acceleration',
        extensionId: 'gdxfor',
        collaborator: 'Vernier',
        iconURL: gdxforIconURL,
        insetIconURL: gdxforInsetIconURL,
        description: (
            <FormattedMessage
                defaultMessage="Sense push, pull, motion, and spin."
                description="Description for the Vernier Go Direct Force and Acceleration sensor extension"
                id="gui.extension.gdxfor.description"
            />
        ),
        tags: ['scratch'],
        featured: true,
        disabled: false,
        bluetoothRequired: true,
        internetConnectionRequired: true,
        launchPeripheralConnectionFlow: true,
        useAutoScan: false,
        connectionIconURL: gdxforConnectionIconURL,
        connectionSmallIconURL: gdxforConnectionSmallIconURL,
        connectingMessage: (
            <FormattedMessage
                defaultMessage="Connecting"
                description="Message to help people connect to their force and acceleration sensor."
                id="gui.extension.gdxfor.connectingMessage"
            />
        ),
        helpLink: 'https://scratch.mit.edu/vernier'
    },*/
    {
        name: '屏幕',
        extensionId: 'globalCoordinate',
        iconURL: gcbg,
        insetIconURL: gci,
        description: '屏幕移动旋转等。',
        tags: ['be', 'tool'],
        featured: true
    },
    {
        name: '数据',
        extensionId: 'Data',
        insetIconURL: dataI,
        iconURL: databg,
        description: '数据处理。',
        tags: ['operation', 'be'],
        featured: true
    },
    {
        name: '运算',
        extensionId: 'Operation',
        iconURL: operationIcon,
        description: '高级运算，包含了字符串、计算、位运算、二维图形运算等。',
        tags: ['operation', 'be'],
        featured: true
    },
    {
        name: '正则表达式',
        extensionId: 'RegularExpression',
        iconURL: regular_expressionIcon,
        description: '完成正则表达式相关的操作。',
        tags: ['be', 'operation', 'tool'],
        featured: true
    },
    {
        name: 'JS',
        extensionId: 'js',
        iconURL: jsIcon,
        description: 'JS',
        tags: ['tool', 'be'],
        featured: true
    },
    {
        name: 'Scratch高级设置',
        collaborator: '40code',
        extensionId: 'set',
        iconURL: setIcon,
        description: '高级设置',
        tags: ['tool', 'else'],
        featured: true
    },
    {
        name: '后期处理',
        collaborator: '福克斯',
        extensionId: 'postprocessing',
        iconURL: Null,
        description: '一些屏幕效果。',
        tags: ['tool', 'else'],
        featured: true
    },
    {
        name: '工具',
        extensionId: 'tool',
        iconURL: toolIcon,
        description: '高级工具。　　　　　　　　　　　　　　　　　　　　　　　　　　该扩展可以随时投稿添加功能',
        tags: ['tool'],
        featured: true
    },
    {
        name: (
            <FormattedMessage
                defaultMessage="TurboWarp Blocks"
                description="Name of TW extension"
                id="tw.twExtension.name"
            />
        ),
        extensionId: 'tw',
        iconURL: twIcon,
        description: (
            <FormattedMessage
                defaultMessage="Weird new blocks."
                description="Description of TW extension"
                id="tw.twExtension.description"
            />
        ),

        tags: ['tool', 'tw'],
        featured: true
    },
    // Extensions loaded from URLs do not support localization, so unfortunately we will just leave English names here.
    {
        name: '拉伸',
        extensionId: 'stretch',
        iconURL: stretchIcon,
        description: '水平或垂直拉伸角色。',
        tags: ['tool', 'tw'],

        featured: true
    },
    {
        name: '物理引擎',
        collaborator: 'griffpatch',
        extensionId: 'box2d',
        iconURL: box2dIcon,
        insetIconURL: box2dI,
        description: '模拟 2D 刚体物体运动的引擎，帮你创造一个符合现实物理法则的二维世界。',
        tags: ['tool', 'tw'],

        featured: true
    },
    {
        name: '常用程序',
        collaborator: 'Sheep_maker',
        extensionId: 'utilities',
        iconURL: utilitiesIcon,
        description: '常用的块。',
        tags: ['operation', 'tw'],
        featured: true
    },
    {
        name: '传感',
        extensionURL: "data:text/javascript;base64,",
        extensionId: 'obviousalexsensing',
        iconURL: obviousalexsensingIcon,
        description: '获取 Scratch 传感的扩展。',
        tags: ['tool', 'tw'],
        featured: true
    },
    {
        name: '光标',
        extensionURL: "data:text/javascript;base64,",
        extensionId: 'MouseCursor',
        iconURL: cursorIcon,
        description: '改变鼠标指针的形状，还可以自定义指针形状。',
        tags: ['tool', 'tw'],

        featured: true
    },
    {
        name: '文件',
        extensionId: 'files',
        iconURL: fileIcon,
        description: '读取与下载文件。',
        tags: ['tool', 'tw'],

        featured: true
    },
    {
        name: '锁定指针',
        extensionId: 'pointerlock',
        iconURL: pointerlockIcon,
        // eslint-disable-next-line max-len
        description: '添加鼠标锁定的块。鼠标ｘｙ将报告上一帧鼠标移动坐标。',
        tags: ['tool', 'tw'],

        featured: true
    },
    {
        name: '运行选项',
        extensionId: 'runtimeoptions',
        iconURL: runtimeOptionsIcon,
        description: '设置与获取加速模式、帧数、补帧、克隆限制、舞台区大小等。',
        tags: ['tool', 'tw'],

        featured: true
    },
    {
        name: '获取',
        extensionId: 'fetch',
        iconURL: fetchIcon,
        extensionURL: "data:text/javascript;base64,KGZ1bmN0aW9uKFNjcmF0Y2gpIHsNCiAgICAndXNlIHN0cmljdCc7DQogIA0KICAgIGNsYXNzIEZldGNoIHsNCiAgICAgIGdldEluZm8gKCkgew0KICAgICAgICByZXR1cm4gew0KICAgICAgICAgIGlkOiAnZmV0Y2gnLA0KICAgICAgICAgIG5hbWU6ICfojrflj5YnLA0KICAgICAgICAgIGJsb2NrczogWw0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICBvcGNvZGU6ICdnZXQnLA0KICAgICAgICAgICAgICBibG9ja1R5cGU6IFNjcmF0Y2guQmxvY2tUeXBlLlJFUE9SVEVSLA0KICAgICAgICAgICAgICB0ZXh0OiAnR0VUIFtVUkxdJywNCiAgICAgICAgICAgICAgYXJndW1lbnRzOiB7DQogICAgICAgICAgICAgICAgVVJMOiB7DQogICAgICAgICAgICAgICAgICB0eXBlOiBTY3JhdGNoLkFyZ3VtZW50VHlwZS5TVFJJTkcsDQogICAgICAgICAgICAgICAgICBkZWZhdWx0VmFsdWU6ICdodHRwczovL2V4dGVuc2lvbnMudHVyYm93YXJwLm9yZy9oZWxsby50eHQnDQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgICAgXQ0KICAgICAgICB9Ow0KICAgICAgfQ0KICANCiAgICAgIGdldCAoYXJncykgew0KICAgICAgICByZXR1cm4gU2NyYXRjaC5mZXRjaChhcmdzLlVSTCkNCiAgICAgICAgICAudGhlbihyID0+IHIudGV4dCgpKQ0KICAgICAgICAgIC5jYXRjaCgoKSA9PiAnJyk7DQogICAgICB9DQogICAgfQ0KICANCiAgICBTY3JhdGNoLmV4dGVuc2lvbnMucmVnaXN0ZXIobmV3IEZldGNoKCkpOw0KICB9KShTY3JhdGNoKTs=",
        description: '向广泛的互联网提出请求。',
        tags: ['tool', 'tw'],
        featured: true,
        internetConnectionRequired: true
    },
    {
        name: '文本',
        collaborator: 'CST1229',
        extensionId: 'strings',
        iconURL: stringsIcon,
        // eslint-disable-next-line max-len
        description: '字符串处理。',
        tags: ['operation', 'tw'],

        featured: true
    },
    {
        name: 'RixxyX',
        collaborator: 'RixTheTyrunt',
        extensionId: 'RixxyX',
        iconURL: Null,
        extensionURL: "data:text/javascript;base64,",
        description: '各种实用模块。',
        tags: ['operation', 'tw'],

        featured: true
    },
    {
        name: '更多比较',
        collaborator: 'NOname',
        extensionId: 'nonameawacomparisons',
        iconURL: comparisonsIcon,
        extensionURL: "data:text/javascript;base64,",
        description: '更多的比较布尔值。',
        tags: ['operation', 'tw'],

        featured: true
    },
    {
        name: 'rxFS',
        collaborator: '',
        extensionId: '0832rxfs',
        iconURL: rxFSIcon,
        extensionURL: "data:text/javascript;base64,",
        description: '在Scratch中轻松地构建一个文件系统实现管理,存储,访问数据功能。',
        tags: ['tool', 'tw'],
        collaborator: '大主教大祭司',
        featured: true
    },
    {
        name: '图形 2D',
        collaborator: 'NOname',
        extensionId: 'nonameawagraph',
        iconURL: graphics2DIcon,
        extensionURL: "data:text/javascript;base64,",
        description: '2D 图形运算',
        tags: ['operation', 'tw'],

        featured: true
    },
    {
        name: '注释',
        collaborator: 'LukeManiaStudios',
        extensionId: 'lmscomments',
        iconURL: CommentBlocksIcon,
        extensionURL: "data:text/javascript;base64,KGZ1bmN0aW9uIChTY3JhdGNoKSB7J3VzZSBzdHJpY3QnO2NsYXNzIENvbW1lbnRCbG9ja3Mge2dldEluZm8oKSB7cmV0dXJuIHtpZDogJ2xtc2NvbW1lbnRzJyxuYW1lOiAn5rOo6YeKJyxjb2xvcjE6ICcjZTRkYjhjJyxjb2xvcjI6ICcjYzZiZTc5Jyxjb2xvcjM6ICcjYThhMTY3JyxibG9ja3M6IFt7b3Bjb2RlOiAnY29tbWVudEhhdCcsYmxvY2tUeXBlOiBTY3JhdGNoLkJsb2NrVHlwZS5IQVQsdGV4dDogJy8vIFtDT01NRU5UXScsaXNFZGdlQWN0aXZhdGVkOiBmYWxzZSxhcmd1bWVudHM6IHtDT01NRU5UOiB7dHlwZTogU2NyYXRjaC5Bcmd1bWVudFR5cGUuU1RSSU5HLGRlZmF1bHRWYWx1ZTogJ2NvbW1lbnQnfX19LHtvcGNvZGU6ICdjb21tZW50Q29tbWFuZCcsYmxvY2tUeXBlOiBTY3JhdGNoLkJsb2NrVHlwZS5DT01NQU5ELHRleHQ6ICcvLyBbQ09NTUVOVF0nLGFyZ3VtZW50czoge0NPTU1FTlQ6IHt0eXBlOiBTY3JhdGNoLkFyZ3VtZW50VHlwZS5TVFJJTkcsZGVmYXVsdFZhbHVlOiAnY29tbWVudCd9fX0se29wY29kZTogJ2NvbW1lbnRSZXBvcnRlcicsYmxvY2tUeXBlOiBTY3JhdGNoLkJsb2NrVHlwZS5SRVBPUlRFUix0ZXh0OiAnW0lOUFVUXSAvLyBbQ09NTUVOVF0nLGFyZ3VtZW50czoge0NPTU1FTlQ6IHt0eXBlOiBTY3JhdGNoLkFyZ3VtZW50VHlwZS5TVFJJTkcsZGVmYXVsdFZhbHVlOiAnY29tbWVudCd9LElOUFVUOiB7dHlwZTogU2NyYXRjaC5Bcmd1bWVudFR5cGUuU1RSSU5HLGRlZmF1bHRWYWx1ZTogJyd9fX0se29wY29kZTogJ2NvbW1lbnRCb29sZWFuJyxibG9ja1R5cGU6IFNjcmF0Y2guQmxvY2tUeXBlLkJPT0xFQU4sdGV4dDogJ1tJTlBVVF0gLy8gW0NPTU1FTlRdJyxhcmd1bWVudHM6IHtDT01NRU5UOiB7dHlwZTogU2NyYXRjaC5Bcmd1bWVudFR5cGUuU1RSSU5HLGRlZmF1bHRWYWx1ZTogJ2NvbW1lbnQnfSxJTlBVVDoge3R5cGU6IFNjcmF0Y2guQXJndW1lbnRUeXBlLkJPT0xFQU59fX1dfTt9Y29tbWVudEhhdCgpIHsvLyBuby1vcH1jb21tZW50Q29tbWFuZCgpIHsvLyBuby1vcH1jb21tZW50UmVwb3J0ZXIoYXJncykge3JldHVybiBhcmdzLklOUFVUO31jb21tZW50Qm9vbGVhbihhcmdzKSB7cmV0dXJuIGFyZ3MuSU5QVVQgfHwgZmFsc2U7Cn0KfQpTY3JhdGNoLmV4dGVuc2lvbnMucmVnaXN0ZXIobmV3IENvbW1lbnRCbG9ja3MoKSk7Cn0pKFNjcmF0Y2gpOw==",
        description: '注释块。',
        tags: ['tool', 'tw'],

        featured: true
    },
    {
        name: 'More Stuff',
        extensionId: 'morestuff',
        iconURL: Null,
        extensionURL: "data:text/javascript;base64,CgpjbGFzcyBtb3Jlc3R1ZmZFeHRlbnNpb24gewogIGdldEluZm8oKSB7CiAgICByZXR1cm4gewogICAgICBpZDogJ21vcmVzdHVmZicsCiAgICAgIG5hbWU6ICdNb3JlIFN0dWZmJywKICAgICAgYmxvY2tzOiBbCiAgICAgICAgewogICAgICAgICAgb3Bjb2RlOiAnaGVscCcsCiAgICAgICAgICBibG9ja1R5cGU6IFNjcmF0Y2guQmxvY2tUeXBlLlJFUE9SVEVSLAogICAgICAgICAgdGV4dDogJ0hlbHAnLAogICAgICAgICAgYXJndW1lbnRzOiB7fQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgb3Bjb2RlOiAnc3RyaWN0bHlFcXVhbHMnLAogICAgICAgICAgYmxvY2tUeXBlOiBTY3JhdGNoLkJsb2NrVHlwZS5CT09MRUFOLAogICAgICAgICAgdGV4dDogJ1tPTkVdID09PSBbVFdPXScsCiAgICAgICAgICBhcmd1bWVudHM6IHsKICAgICAgICAgICAgT05FOiB7CiAgICAgICAgICAgICAgdHlwZTogU2NyYXRjaC5Bcmd1bWVudFR5cGUuU1RSSU5HLAogICAgICAgICAgICAgIGRlZmF1bHRWYWx1ZTogJ24nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFRXTzogewogICAgICAgICAgICAgIHR5cGU6IFNjcmF0Y2guQXJndW1lbnRUeXBlLlNUUklORywKICAgICAgICAgICAgICBkZWZhdWx0VmFsdWU6ICduJwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICBvcGNvZGU6ICdMb29zbHlFcXVhbHMnLAogICAgICAgICAgYmxvY2tUeXBlOiBTY3JhdGNoLkJsb2NrVHlwZS5CT09MRUFOLAogICAgICAgICAgdGV4dDogJ1tPTkVdID0gW1RXT10nLAogICAgICAgICAgYXJndW1lbnRzOiB7CiAgICAgICAgICAgIE9ORTogewogICAgICAgICAgICAgIHR5cGU6IFNjcmF0Y2guQXJndW1lbnRUeXBlLlNUUklORywKICAgICAgICAgICAgICBkZWZhdWx0VmFsdWU6ICduJwogICAgICAgICAgICB9LAogICAgICAgICAgICBUV086IHsKICAgICAgICAgICAgICB0eXBlOiBTY3JhdGNoLkFyZ3VtZW50VHlwZS5TVFJJTkcsCiAgICAgICAgICAgICAgZGVmYXVsdFZhbHVlOiAnbicKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgb3Bjb2RlOiAnUm9vdE9mJywKICAgICAgICAgIGJsb2NrVHlwZTogU2NyYXRjaC5CbG9ja1R5cGUuUkVQT1JURVIsCiAgICAgICAgICB0ZXh0OiAnW09ORV3iiJpbVFdPXScsCiAgICAgICAgICBhcmd1bWVudHM6IHsKICAgICAgICAgICAgT05FOiB7CiAgICAgICAgICAgICAgdHlwZTogU2NyYXRjaC5Bcmd1bWVudFR5cGUuU1RSSU5HLAogICAgICAgICAgICAgIGRlZmF1bHRWYWx1ZTogJzInCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFRXTzogewogICAgICAgICAgICAgIHR5cGU6IFNjcmF0Y2guQXJndW1lbnRUeXBlLlNUUklORywKICAgICAgICAgICAgICBkZWZhdWx0VmFsdWU6ICcyJwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICBvcGNvZGU6ICdFeHBvbmVudCcsCiAgICAgICAgICBibG9ja1R5cGU6IFNjcmF0Y2guQmxvY2tUeXBlLlJFUE9SVEVSLAogICAgICAgICAgdGV4dDogJ1tPTkVdXltUV09dJywKICAgICAgICAgIGFyZ3VtZW50czogewogICAgICAgICAgICBPTkU6IHsKICAgICAgICAgICAgICB0eXBlOiBTY3JhdGNoLkFyZ3VtZW50VHlwZS5TVFJJTkcsCiAgICAgICAgICAgICAgZGVmYXVsdFZhbHVlOiAnMicKICAgICAgICAgICAgfSwKICAgICAgICAgICAgVFdPOiB7CiAgICAgICAgICAgICAgdHlwZTogU2NyYXRjaC5Bcmd1bWVudFR5cGUuU1RSSU5HLAogICAgICAgICAgICAgIGRlZmF1bHRWYWx1ZTogJzInCiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgIG9wY29kZTogJ1VwcGVyQ2FzZScsCiAgICAgICAgICBibG9ja1R5cGU6IFNjcmF0Y2guQmxvY2tUeXBlLlJFUE9SVEVSLAogICAgICAgICAgdGV4dDogJ1N0cmluZy5VcHBlckNhc2VbT05FXScsCiAgICAgICAgICBhcmd1bWVudHM6IHsKICAgICAgICAgICAgT05FOiB7CiAgICAgICAgICAgICAgdHlwZTogU2NyYXRjaC5Bcmd1bWVudFR5cGUuU1RSSU5HLAogICAgICAgICAgICAgIGRlZmF1bHRWYWx1ZTogJyAnCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICBvcGNvZGU6ICdMb3dlckNhc2UnLAogICAgICAgICAgYmxvY2tUeXBlOiBTY3JhdGNoLkJsb2NrVHlwZS5SRVBPUlRFUiwKICAgICAgICAgIHRleHQ6ICdTdHJpbmcuTG93ZXJDYXNlW09ORV0nLAogICAgICAgICAgYXJndW1lbnRzOiB7CiAgICAgICAgICAgIE9ORTogewogICAgICAgICAgICAgIHR5cGU6IFNjcmF0Y2guQXJndW1lbnRUeXBlLlNUUklORywKICAgICAgICAgICAgICBkZWZhdWx0VmFsdWU6ICcgJwogICAgICAgICAgICB9LAogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgb3Bjb2RlOiAnVGVhbVR5cGVyJywKICAgICAgICAgIGJsb2NrVHlwZTogU2NyYXRjaC5CbG9ja1R5cGUuUkVQT1JURVIsCiAgICAgICAgICB0ZXh0OiAnU3RyaW5nLlRlYW1UeXBlcltPTkVdJywKICAgICAgICAgIGFyZ3VtZW50czogewogICAgICAgICAgICBPTkU6IHsKICAgICAgICAgICAgICB0eXBlOiBTY3JhdGNoLkFyZ3VtZW50VHlwZS5TVFJJTkcsCiAgICAgICAgICAgICAgZGVmYXVsdFZhbHVlOiAnICcKICAgICAgICAgICAgfSwKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgIG9wY29kZTogJ1N0cmluZ1JldmVyc2UnLAogICAgICAgICAgYmxvY2tUeXBlOiBTY3JhdGNoLkJsb2NrVHlwZS5SRVBPUlRFUiwKICAgICAgICAgIHRleHQ6ICdTdHJpbmcuUmV2ZXJzZVtPTkVdJywKICAgICAgICAgIGFyZ3VtZW50czogewogICAgICAgICAgICBPTkU6IHsKICAgICAgICAgICAgICB0eXBlOiBTY3JhdGNoLkFyZ3VtZW50VHlwZS5TVFJJTkcsCiAgICAgICAgICAgICAgZGVmYXVsdFZhbHVlOiAnICcKICAgICAgICAgICAgfSwKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgIG9wY29kZTogJ2dldGZldGNoJywKICAgICAgICAgIGJsb2NrVHlwZTogU2NyYXRjaC5CbG9ja1R5cGUuUkVQT1JURVIsCiAgICAgICAgICB0ZXh0OiAnR0VUIFtVUkxdJywKICAgICAgICAgIGFyZ3VtZW50czogewogICAgICAgICAgICBVUkw6IHsKICAgICAgICAgICAgICB0eXBlOiBTY3JhdGNoLkFyZ3VtZW50VHlwZS5TVFJJTkcsCiAgICAgICAgICAgICAgZGVmYXVsdFZhbHVlOiAnaHR0cHM6Ly8nCiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LAogICAgICBdCiAgICB9OwogIH0KICBzdHJpY3RseUVxdWFscyhhcmdzKSB7CiAgICByZXR1cm4gYXJncy5PTkUgPT09IGFyZ3MuVFdPOwogIH0KICBMb29zbHlFcXVhbHMoYXJncykgewogICAgcmV0dXJuIGFyZ3MuT05FID09IGFyZ3MuVFdPOwogIH0KICBSb290T2YoYXJncykgewogICAgZnVuY3Rpb24gbnRocm9vdCh4LCBuKSB7CiAgICAgIHRyeSB7CiAgICAgICAgdmFyIG5lZ2F0ZSA9IG4gJSAyID09IDEgJiYgeCA8IDA7CiAgICAgICAgaWYobmVnYXRlKQogICAgICAgICAgeCA9IC14OwogICAgICAgIHZhciBwb3NzaWJsZSA9IE1hdGgucG93KHgsIDEgLyBuKTsKICAgICAgICBuID0gTWF0aC5wb3cocG9zc2libGUsIG4pOwogICAgICAgIGlmKE1hdGguYWJzKHggLSBuKSA8IDEgJiYgKHggPiAwID09IG4gPiAwKSkKICAgICAgICAgIHJldHVybiBuZWdhdGUgPyAtcG9zc2libGUgOiBwb3NzaWJsZTsKICAgICAgfSBjYXRjaChlKXt9CiAgICB9CiAgICByZXR1cm4gbnRocm9vdChhcmdzLlRXTyxhcmdzLk9ORSk7CiAgfQogIEV4cG9uZW50KGFyZ3MpewogICAgcmV0dXJuIE1hdGgucG93KGFyZ3MuT05FLGFyZ3MuVFdPKTsKICB9CiAgVXBwZXJDYXNlKGFyZ3MpewogICAgcmV0dXJuIGFyZ3MuT05FLnRvVXBwZXJDYXNlKCk7CiAgfQogIExvd2VyQ2FzZShhcmdzKXsKICAgIHJldHVybiBhcmdzLk9ORS50b0xvd2VyQ2FzZSgpOwogIH0KICBUZWFtVHlwZXIoYXJncyl7CiAgICB2YXIgbmV3c3RyID0gIiI7CiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFyZ3MuT05FLmxlbmd0aDsgaSsrKSB7CiAgICAgIGNvbnN0IHNob3VsZGRvID0gKGkvMikudG9TdHJpbmcoKS5pbmNsdWRlcygiLiIpOyAvL2RpdmlkZSBieSAyLCBjaGVjayBmb3IgYSBkZWNpbWFsIHBvaW50CiAgICAgIGlmIChzaG91bGRkbykgewogICAgICAgIG5ld3N0ciArPSBhcmdzLk9ORS5jaGFyQXQoaSkudG9VcHBlckNhc2UoKQogICAgICB9IGVsc2UgewogICAgICAgIG5ld3N0ciArPSBhcmdzLk9ORS5jaGFyQXQoaSkudG9Mb3dlckNhc2UoKQogICAgICB9CiAgICB9CiAgICByZXR1cm4gbmV3c3RyOwogIH0KICBTdHJpbmdSZXZlcnNlKGFyZ3MpewogICAgcmV0dXJuIGFyZ3MuT05FLnNwbGl0KCIiKS5yZXZlcnNlKCkuam9pbigiIik7CiAgfQogIGdldGZldGNoKGFyZ3MpIHsKICAgIHJldHVybiBmZXRjaChhcmdzLlVSTCkKICAgICAgLnRoZW4ociA9PiByLnRleHQoKSkKICAgICAgLmNhdGNoKCgpID0+ICcnKTsKICB9CiAgaGVscChhcmdzKXsKICAgIHJldHVybiBmZXRjaCgnaHR0cHM6Ly9oZWNrZXI3NzM0LmdpdGh1Yi5pby90dXJib3dhcnAtZXh0ZW5zaW9uL1JFQURNRS5tZCcpCiAgICAudGhlbihyID0+IHIudGV4dCgpKQogICAgLmNhdGNoKCgpID0+ICcnKTsKICB9Cgp9ClNjcmF0Y2guZXh0ZW5zaW9ucy5yZWdpc3RlcihuZXcgbW9yZXN0dWZmRXh0ZW5zaW9uKCkpOwo=",
        tags: ['else'],

        featured: true
    },
    {
        name: 'Pi Extension',
        extensionId: 'piextension',
        iconURL: Null,
        extensionURL: "data:text/javascript;base64,CgpjbGFzcyBQaUV4dGVuc2lvbiB7CiAgLyoqCiAgICogU2NyYXRjaCB3aWxsIGNhbGwgdGhpcyBtZXRob2QgKm9uY2UqIHdoZW4gdGhlIGV4dGVuc2lvbiBsb2Fkcy4KICAgKiBUaGlzIG1ldGhvZCdzIGpvYiBpcyB0byB0ZWxsIFNjcmF0Y2ggdGhpbmdzIGxpa2UgdGhlIGV4dGVuc2lvbidzIElELCBuYW1lLCBhbmQgd2hhdCBibG9ja3MgaXQgc3VwcG9ydHMuCiAgICovCiAgZ2V0SW5mbygpIHsKICAgIHJldHVybiB7CiAgICAgIC8vIGBpZGAgaXMgdGhlIGludGVybmFsIElEIG9mIHRoZSBleHRlbnNpb24KICAgICAgLy8gSXQgc2hvdWxkIG5ldmVyIGNoYW5nZSEKICAgICAgLy8gSWYgeW91IGNob29zZSB0byBtYWtlIGFuIGFjdHVhbCBleHRlbnNpb24sIHBsZWFzZSBjaGFuZ2UgdGhpcyB0byBzb21ldGhpbmcgZWxzZS4KICAgICAgLy8gT25seSB0aGUgY2hhcmFjdGVycyBhLXogYW5kIDAtOSBjYW4gYmUgdXNlZC4gTm8gc3BhY2VzIG9yIHNwZWNpYWwgY2hhcmFjdGVycy4KICAgICAgaWQ6ICdwaWV4dGVuc2lvbicsCgogICAgICAvLyBgbmFtZWAgaXMgd2hhdCB0aGUgdXNlciBzZWVzIGluIHRoZSB0b29sYm94CiAgICAgIC8vIEl0IGNhbiBiZSBjaGFuZ2VkIHdpdGhvdXQgYnJlYWtpbmcgcHJvamVjdHMuCiAgICAgIG5hbWU6ICdQaSBFeHRlbnNpb24nLAoKICAgICAgYmxvY2tzOiBbCiAgICAgICAgewogICAgICAgICAgLy8gYG9wY29kZWAgaXMgdGhlIGludGVybmFsIElEIG9mIHRoZSBibG9jawogICAgICAgICAgLy8gSXQgc2hvdWxkIG5ldmVyIGNoYW5nZSEKICAgICAgICAgIC8vIEl0IGNvcnJlc3BvbmRzIHRvIHRoZSBjbGFzcyBtZXRob2Qgd2l0aCB0aGUgc2FtZSBuYW1lLgogICAgICAgICAgb3Bjb2RlOiAncGl2YXInLAogICAgICAgICAgYmxvY2tUeXBlOiBTY3JhdGNoLkJsb2NrVHlwZS5SRVBPUlRFUiwKICAgICAgICAgIHRleHQ6ICdQaScKICAgICAgICB9CiAgICAgIF0KICAgIH07CiAgfQoKICBwaXZhcigpIHsKICAgIC8vIFlvdSBjYW4ganVzdCByZXR1cm4gYSB2YWx1ZTogYW55IHN0cmluZywgYm9vbGVhbiwgb3IgbnVtYmVyIHdpbGwgd29yay4KICAgIHJldHVybiAnMy4xNDE1OTI2NTM1OSc7CiAgfQoKfQoKLy8gQ2FsbCBTY3JhdGNoLmV4dGVuc2lvbnMucmVnaXN0ZXIgdG8gcmVnaXN0ZXIgeW91ciBleHRlbnNpb24KLy8gTWFrZSBzdXJlIHRvIHJlZ2lzdGVyIGVhY2ggZXh0ZW5zaW9uIGV4YWN0bHkgb25jZQpTY3JhdGNoLmV4dGVuc2lvbnMucmVnaXN0ZXIobmV3IFBpRXh0ZW5zaW9uKCkpOwo=",
        tags: ['else'],

        featured: true
    },
    {
        name: (
            <FormattedMessage
                defaultMessage="Custom Extension"
                description="Name of custom extension category"
                id="tw.customExtension.name"
            />
        ),
        extensionId: '',
        iconURL: customExtensionIcon,
        description: (
            <FormattedMessage
                defaultMessage="Load custom extensions from URLs."
                description="Description of custom extension category"
                id="tw.customExtension.description"
            />
        ),
        tags: ['tw', 'tool'],
        internetConnectionRequired: true,
        featured: true
    },
    /*{
        name: '从本地加载扩展',
        extensionId: 'upload',
        iconURL: Null,
        description: '本地加载扩展。',
        tags: ['tw'],
        //extensionURL: 'http://www.better-extension.com/ext/editor/upload.js',
        featured: true
    },*/
    {
        name: (
            <FormattedMessage
                defaultMessage="TurboWarp Extension Gallery"
                description="Name of extensions.turbowarp.org in extension library"
                id="tw.extensionGallery.name"
            />
        ),
        href: 'https://extensions.turbowarp.org/',
        extensionId: '',
        iconURL: galleryIcon,
        description: (
            <FormattedMessage
                // eslint-disable-next-line max-len
                defaultMessage="We list many extensions here for convenience. You can find even more on extensions.turbowarp.org."
                description="Description of extensions.turbowarp.org in extension library"
                id="tw.extensionGallery.description"
            />
        ),
        tags: ['tw', 'tool'],
        internetConnectionRequired: true,
        featured: true
    },
];
